//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Graph.Client.WPF.GraphService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/Graph.Model")]
    [System.SerializableAttribute()]
    public partial class Node : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] AdjacentNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] AdjacentNodes {
            get {
                return this.AdjacentNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.AdjacentNodesField, value) != true)) {
                    this.AdjacentNodesField = value;
                    this.RaisePropertyChanged("AdjacentNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GraphService.IGraph")]
    public interface IGraph {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraph/GetGraph", ReplyAction="http://tempuri.org/IGraph/GetGraphResponse")]
        Graph.Client.WPF.GraphService.Node[] GetGraph();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraph/GetGraph", ReplyAction="http://tempuri.org/IGraph/GetGraphResponse")]
        System.Threading.Tasks.Task<Graph.Client.WPF.GraphService.Node[]> GetGraphAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraph/GetShortestPath", ReplyAction="http://tempuri.org/IGraph/GetShortestPathResponse")]
        int[] GetShortestPath(string idFrom, string idTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGraph/GetShortestPath", ReplyAction="http://tempuri.org/IGraph/GetShortestPathResponse")]
        System.Threading.Tasks.Task<int[]> GetShortestPathAsync(string idFrom, string idTo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGraphChannel : Graph.Client.WPF.GraphService.IGraph, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GraphClient : System.ServiceModel.ClientBase<Graph.Client.WPF.GraphService.IGraph>, Graph.Client.WPF.GraphService.IGraph {
        
        public GraphClient() {
        }
        
        public GraphClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GraphClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GraphClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Graph.Client.WPF.GraphService.Node[] GetGraph() {
            return base.Channel.GetGraph();
        }
        
        public System.Threading.Tasks.Task<Graph.Client.WPF.GraphService.Node[]> GetGraphAsync() {
            return base.Channel.GetGraphAsync();
        }
        
        public int[] GetShortestPath(string idFrom, string idTo) {
            return base.Channel.GetShortestPath(idFrom, idTo);
        }
        
        public System.Threading.Tasks.Task<int[]> GetShortestPathAsync(string idFrom, string idTo) {
            return base.Channel.GetShortestPathAsync(idFrom, idTo);
        }
    }
}
